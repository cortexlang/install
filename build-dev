#!/bin/bash

VERSION="1.0"

install_corto_fail() {
    echo
    >&2 echo "Installation failed :-("
    exit

    # If asking for password failed, don't ask again
    if sudo -n true 2>/dev/null; then
        true
    else
        echo "  If you do not have sudo privileges, or don't want to install"
        echo "  software to /usr/local, consider building Corto from source."
        echo
        echo "  Our code is on GitHub: https://www.github.com/cortoproject/corto"
        echo
        exit -1
    fi

    rm -rf "$INSTALL_TMPDIR"
    sudo rm -f "/usr/local/bin/corto"
    sudo rm -f "/usr/local/bin/corto.$VERSION"
    sudo rm -rf "/usr/local/bin/cortobin"
    sudo rm -f "/usr/local/lib/corto/0.2/packages/corto/libcorto.so"
    sudo rm -f "/usr/local/lib/corto/0.2/packages/corto/libcorto.so.$VERSION"
    sudo rm -rf "/usr/local/lib/corto/$VERSION"
    sudo rm -rf "/usr/local/include/corto/$VERSION"
    sudo rm -rf "/usr/local/etc/corto/$VERSION"
    sudo rm -rf "$HOME/.corto"

    # Get rid of old installations
    sudo rm -f "/usr/bin/corto"
    sudo rm -f "/usr/bin/corto.*"
    sudo rm -rf "/usr/local/bin/cortobin"
    sudo rm -f "/usr/lib/libcorto.so"
    sudo rm -f "/usr/lib/libcorto.so.*"
    sudo rm -f "/usr/local/lib/libcorto.so"
    sudo rm -f "/usr/local/lib/libcorto.so.$VERSION"
    sudo rm -rf "/usr/lib/corto/*"
    sudo rm -rf "/usr/include/corto/*"
    sudo rm -rf "/usr/etc/corto/*"

    echo "  Maybe your internet connection failed, please retry ! If"
    echo "  the issue persists, maybe there is a problem with your platform. In"
    echo "  that case, it would be awesome if you can create an issue on"
    echo "  http://www.github.com/cortoproject/install! Please provide the output"
    echo "  of the installer, together with the output of 'uname' and 'uname -m'."
    echo
}

build_repo() {
    if [ ! -d $1 ];
    then
        git clone https://github.com/cortoproject/${1}.git
    else
        cd $1
        git fetch origin
        git reset --hard origin/master
        git clean -xdf
        cd ..
    fi
    cd $1
    if [ -f "configure" ];
    then
        . ./configure
    fi
    if [ -f "project.json" ];
    then
        corto rakefile
    fi
    rake
    cd ..
}

install_corto () {
    set -e
    set -u

    UNAME=$(uname)
    ARCHITECTURE=$(uname -m)
    PREFIX="/usr/local"
    FILENAME="corto"
    INSTALL_TMPDIR="corto-src"

    # Check supported OS
    if [ "$UNAME" != "Linux" -a "$UNAME" != "Darwin" ] ; then
        >&2 echo "corto: sorry, this OS is not supported yet!"
        exit 1
    fi
    if [ "$UNAME" = "Darwin" ] ; then
        if [ "i386" != "$(uname -p)" -o "1" != "$(sysctl -n hw.cpu64bit_capable 2>/dev/null || echo 0)" ] ; then
          >&2 echo "corto: only 64-bit Intel processors are supported at this time!"
          exit 1
        fi
    fi

    if [ "$UNAME" = "Linux" ] ; then
        sudo apt-get -y --force-yes install git build-essential rake libffi-dev libxml2-dev flex bison libcurl4-openssl-dev libssl-dev
    elif [ "$UNAME" = "Darwin" ] ; then
        xcode-select -p
        rc=$?; if [ $rc -eq 2 ]; then
            sudo xcode-select --install
        fi
    fi

    trap install_corto_fail EXIT

    echo
    echo "Hi! Downloading Corto package repositories..."
    mkdir -p "$INSTALL_TMPDIR"

    cd $INSTALL_TMPDIR
    build_repo "corto"
    build_repo "argparse"
    build_repo "driver-tool-locate"
    build_repo "driver-tool-rakefile"
    build_repo "driver-tool-build"
    build_repo "driver-tool-default"
    build_repo "driver-tool-clean"
    build_repo "driver-tool-rebuild"
    build_repo "driver-tool-install"
    build_repo "driver-tool-uninstall"
    build_repo "driver-tool-add"
    build_repo "driver-tool-remove"
    build_repo "driver-tool-create"
    build_repo "driver-tool-tar"
    build_repo "driver-tool-untar"
    build_repo "driver-tool-list"
    build_repo "driver-tool-run"
    build_repo "cdiff"
    build_repo "g"
    build_repo "driver-tool-pp"
    build_repo "c-binding"
    build_repo "driver-json-fmt"
    build_repo "driver-json-ext"
    build_repo "driver-xml-fmt"
    build_repo "driver-xml-ext"
    build_repo "driver-tool-sh"
    build_repo "vm"
    build_repo "ic"
    build_repo "corto-language"
    build_repo "test"
    build_repo "driver-tool-test"
    build_repo "cortodoc"
    build_repo "x"
    build_repo "httpclient"
    build_repo "httpserver"
    build_repo "httprouter"
    build_repo "rest"
    build_repo "ws"
    build_repo "ui"
    build_repo "driver-mnt-filestore"

    echo
    corto --logo
    echo
    echo "Corto "`~/.corto/bin/corto --minor`" successfully built!"
    echo
    echo "You have built a development version. This means that corto has been"
    echo "built with lots of features that spot errors early on, awesome! The downside"
    echo "is that all this checking slows things down quite a bit. We recommend to"
    echo "use a release version when you want to deploy your app. To build a"
    echo "release version from source, do:"
    echo
    echo "   $ curl https://corto.io/build-release | sh"
    echo
    echo -e "\033[0;33mBefore using corto, run this command to set your shell environment:\033[0;49m"
    echo
    echo "   $ source corto-src/corto/configure"
    echo
    echo "Get started by creating your first project! Simply do:"
    echo
    echo "   $ corto create myApp"
    echo "   $ myApp/myApp"
    echo
    echo "Make sure to also check out our getting started guide at:"
    echo "   https://corto.io/doc/guide/guide.html#Corto_Essentials_Introduction"
    echo

    trap - EXIT
}

install_corto
