#!/bin/sh

VERSION="0.2.0-alpha"

install_corto_fail() {
    >&2 echo "corto: installation failed :("
    rm -rf "$INSTALL_TMPDIR"
    sudo rm -f "/usr/bin/corto"
    sudo rm -f "/usr/bin/corto.$VERSION"
    sudo rm -f "/usr/lib/libcorto.so"
    sudo rm -f "/usr/lib/libcorto.so.$VERSION"
    sudo rm -rf "/usr/lib/corto/$VERSION"
    sudo rm -rf "/usr/include/corto/$VERSION"
    sudo rm -rf "$HOME/.corto"
}

install_corto () {
    set -e
    set -u

    UNAME=$(uname)
    ARCHITECTURE=$(uname -p)
    PREFIX="/usr"
    FILENAME="corto"
    TARBALL_URL="https://s3.amazonaws.com/cortobinaries/$FILENAME.$UNAME.$ARCHITECTURE.tar.gz"
    INSTALL_TMPDIR="$HOME/.corto/.download"

    echo
    echo "Hi! Stand by, this will just take a second..."
    echo

    # Check supported OS
    if [ "$UNAME" != "Linux" -a "$UNAME" != "Darwin" ] ; then
        >&2 echo "corto: sorry, this OS is not supported yet!"
        exit 1
    fi
    if [ "$UNAME" = "Darwin" ] ; then
        if [ "i386" != "$(uname -p)" -o "1" != "$(sysctl -n hw.cpu64bit_capable 2>/dev/null || echo 0)" ] ; then
          >&2 echo "corto: only 64-bit Intel processors are supported at this time!"
          exit 1
        fi
    fi

    trap install_corto_fail EXIT

    # Ask for password upfront
    sudo true

    # Remove existing cortex version
    if [ "`which cortex`" != "" ]  ; then
        OLD_VERSION=`cortex -v`
        echo "corto: removing your existing cortex distribution ($OLD_VERSION)"
        sudo rm -f "/usr/bin/cortex"
        sudo rm -f "/usr/bin/cortex.$OLD_VERSION"
        sudo rm -f "/usr/lib/libcortex.so"
        sudo rm -f "/usr/lib/libcortex.so.$OLD_VERSION"
        sudo rm -rf "/usr/lib/cortex/$OLD_VERSION"
        sudo rm -rf "/usr/include/cortex/$OLD_VERSION"
    fi

    # Remove existing version
    if [ "`which corto`" != "" ]  ; then
        OLD_VERSION=`corto -v`
        echo "corto: removing your existing corto distribution ($OLD_VERSION)"
        sudo rm -f "/usr/bin/corto"
        sudo rm -f "/usr/bin/corto.$OLD_VERSION"
        sudo rm -f "/usr/lib/libcorto.so"
        sudo rm -f "/usr/lib/libcorto.so.$OLD_VERSION"
        sudo rm -rf "/usr/lib/corto/$OLD_VERSION"
        sudo rm -rf "/usr/include/corto/$OLD_VERSION"
    fi

    mkdir -p "$HOME/.corto"
    sudo mkdir -p "$PREFIX/lib/corto/$VERSION"

    echo "corto: downloading distribution"
    rm -rf "$INSTALL_TMPDIR"
    mkdir -p "$INSTALL_TMPDIR"

    sudo curl --progress-bar --fail "$TARBALL_URL" | tar -xzf - -C "$INSTALL_TMPDIR"

    echo "corto: installing files"
    sudo cp -a "$INSTALL_TMPDIR/." "/usr"
    rm -rf "$INSTALL_TMPDIR"
    sudo mv "/usr/bin/corto" "/usr/bin/corto.$VERSION"
    sudo mv "/usr/lib/libcorto.so" "/usr/lib/libcorto.so.$VERSION"
    sudo ln -s "/usr/bin/corto.$VERSION" "/usr/bin/corto"
    sudo ln -s "/usr/lib/libcorto.so.$VERSION" "/usr/lib/libcorto.so"
    echo "corto: done!"
    echo

    echo "Yay! Corto $VERSION successfully installed!"
    echo
    echo "Hit the ground running with:"
    echo
    echo "   $ corto create myApp"
    echo "   $ cd myApp"
    echo "   $ corto run"
    echo

    trap - EXIT
}

install_corto
