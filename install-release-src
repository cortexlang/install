#!/bin/bash
VERSION="1.0"

install_corto_fail() {
    echo
    >&2 echo "Installation failed :-("
    exit

    # If asking for password failed, don't ask again
    if sudo -n true 2>/dev/null; then
        true
    else
        echo "  If you do not have sudo privileges, or don't want to install"
        echo "  software to /usr/local, consider building Corto from source."
        echo
        echo "  Our code is on GitHub: https://www.github.com/cortoproject/corto"
        echo
        exit -1
    fi

    rm -rf "$INSTALL_TMPDIR"
    sudo rm -f "/usr/local/bin/corto"
    sudo rm -f "/usr/local/bin/corto.$VERSION"
    sudo rm -rf "/usr/local/bin/cortobin"
    sudo rm -f "/usr/local/lib/corto/0.2/packages/corto/libcorto.so"
    sudo rm -f "/usr/local/lib/corto/0.2/packages/corto/libcorto.so.$VERSION"
    sudo rm -rf "/usr/local/lib/corto/$VERSION"
    sudo rm -rf "/usr/local/include/corto/$VERSION"
    sudo rm -rf "/usr/local/etc/corto/$VERSION"
    sudo rm -rf "$HOME/.corto"

    # Get rid of old installations
    sudo rm -f "/usr/bin/corto"
    sudo rm -f "/usr/bin/corto.*"
    sudo rm -rf "/usr/local/bin/cortobin"
    sudo rm -f "/usr/lib/libcorto.so"
    sudo rm -f "/usr/lib/libcorto.so.*"
    sudo rm -f "/usr/local/lib/libcorto.so"
    sudo rm -f "/usr/local/lib/libcorto.so.$VERSION"
    sudo rm -rf "/usr/lib/corto/*"
    sudo rm -rf "/usr/include/corto/*"
    sudo rm -rf "/usr/etc/corto/*"

    echo "  Maybe your internet connection failed, please retry ! If"
    echo "  the issue persists, maybe there is a problem with your platform. In"
    echo "  that case, it would be awesome if you can create an issue on"
    echo "  http://www.github.com/cortoproject/install! Please provide the output"
    echo "  of the installer, together with the output of 'uname' and 'uname -m'."
    echo
}

install_corto () {
    #set -e
    set -u

    UNAME=$(uname)
    ARCHITECTURE=$(uname -m)
    PREFIX="/usr/local"
    FILENAME="corto"
    INSTALL_TMPDIR="$HOME/.cortotmp"

    # Check supported OS
    if [ "$UNAME" != "Linux" -a "$UNAME" != "Darwin" ] ; then
        >&2 echo "corto: sorry, this OS is not supported yet!"
        exit 1
    fi
    if [ "$UNAME" = "Darwin" ] ; then
        if [ "i386" != "$(uname -p)" -o "1" != "$(sysctl -n hw.cpu64bit_capable 2>/dev/null || echo 0)" ] ; then
          >&2 echo "corto: only 64-bit Intel processors are supported at this time!"
          exit 1
        fi
    fi

    if [ "$UNAME" = "Linux" ] ; then
        sudo apt-get -y install git rake libffi-dev libxml2-dev flex bison libcurl4-openssl-dev
    elif [ "$UNAME" = "Darwin" ] ; then
        sudo xcode-select --install
    fi

    trap install_corto_fail EXIT

    echo
    echo "Hi! Downloading Corto package repositories..."
    rm -rf "$INSTALL_TMPDIR"
    mkdir -p "$INSTALL_TMPDIR"

    cd $INSTALL_TMPDIR
    rm -rf corto
    git clone https://github.com/cortoproject/corto
    git clone https://github.com/cortoproject/c-binding
    git clone https://github.com/cortoproject/json
    git clone https://github.com/cortoproject/xml
    git clone https://github.com/cortoproject/vm
    git clone https://github.com/cortoproject/ic
    git clone https://github.com/cortoproject/corto-language
    git clone https://github.com/cortoproject/test
    git clone https://github.com/cortoproject/cortodoc
    git clone https://github.com/cortoproject/x
    git clone https://github.com/cortoproject/web
    git clone https://github.com/cortoproject/httprouter
    git clone https://github.com/cortoproject/rest
    git clone https://github.com/cortoproject/ws
    git clone https://github.com/cortoproject/admin

    # Ask for password upfront
    if sudo -n true 2>/dev/null; then
        true
    else
        echo
        echo "Corto will now be installed to /usr/local for easy access."
        echo "This may prompt for your password."
        sudo true
        echo
    fi

    # Remove existing versions
    if [ "`which corto`" != "" ]  ; then
        OLD_VERSION=`corto --minor`
        echo "Removing your existing corto installation ($OLD_VERSION)"
        sudo corto uninstall --force
        sudo rm -f "/usr/local/bin/corto"
        sudo rm -f "/usr/local/bin/corto.$OLD_VERSION"
        sudo rm -rf "/usr/local/bin/cortobin"
        sudo rm -f "/usr/local/lib/libcorto.so"
        sudo rm -f "/usr/local/lib/libcorto.so.$OLD_VERSION"
        sudo rm -rf "/usr/local/lib/corto/$OLD_VERSION"
        sudo rm -rf "/usr/local/include/corto/$OLD_VERSION"
        sudo rm -rf "/usr/local/etc/corto/$OLD_VERSION"
    fi

    # Start build
    echo "Installing corto library and buildsystem"
    cd corto
    . ./configure
    rake config=release
    corto install
    cd ..
    echo
    echo "Installing corto packages"
    corto install --release c-binding json
    corto install --release xml vm ic corto-language test cortodoc x web httprouter rest ws admin

    echo
    corto --logo
    echo
    echo "Corto "`/usr/local/bin/corto --minor`" successfully installed!"
    echo
    echo "You have installed a development version. This means that corto has been"
    echo "built with lots of features that spot errors early on, awesome! The downside"
    echo "is that all this checking slows things down quite a bit. We recommend to"
    echo "use a release version when you want to deploy your app. To install a"
    echo "release version from source, do:"
    echo "   $ curl https://corto.io/install-release-src | sh"
    echo
    echo "Get started by creating your first project! Simply do:"
    echo
    echo "   $ corto create myApp"
    echo "   $ cd myApp"
    echo "   $ corto run"
    echo
    echo "Make sure to also check out our getting started guide at:"
    echo "   https://corto.io/doc/guide/guide.html#Corto_Essentials_Introduction"
    echo

    trap - EXIT
}

install_corto
